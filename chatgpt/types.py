"""Types used by ChatGPT."""

from collections import UserString
from datetime import datetime
from enum import Enum
from typing import List


class MessageRole(Enum):
    """The possible roles of the sender of a message."""

    USER = "user"
    SYSTEM = "system"
    CHATGPT = "assistant"

    @property
    @classmethod
    def values(cls):
        """The values of the the message roles."""
        return list(map(lambda c: c.value, cls))


class FinishReason(Enum):
    """The possible reasons for a completion to finish."""

    DONE = "stop"
    """The full completion was generated."""
    LIMIT_REACHED = "length"
    """The token limit or maximum completion tokens were reached."""
    FILTERED = "content_filter"
    """Completion content omitted due to content filter."""
    CANCELLED = "cancel"
    """The completion request was interrupted or cancelled."""
    UNDEFINED = "null"
    """The completion finished for an unknown reason."""

    @property
    @classmethod
    def values(cls):
        """The values of the finish reasons."""
        return list(map(lambda c: c.value, cls))


class GPTMessage(UserString):
    """A message that can be sent to ChatGPT."""

    role: MessageRole
    """The role of the message sender."""
    name: str
    """The name of the message."""
    data: str
    """The content of the message."""

    def __init__(self, data: str, role=MessageRole.USER, name=""):
        super().__init__(data)
        self.role = role
        self.name = name

    def to_dict(self) -> dict[str, str]:
        """Get the message dictionary for use in a completion request.

        Returns:
            dict[str, str]: The message dictionary for completion requests.
        """

        return {
            k: v
            for k, v in {
                "role": str(self.role),
                "name": self.name,
                "content": self.data,
            }.items()
            if v
        }


class GPTReply(GPTMessage):
    """A ChatGPT generated reply to a prompt of messages."""

    prompt_tokens: int
    """The number of tokens in the prompt provided."""
    reply_tokens: int
    """The number of tokens in the reply generated."""
    finish_reason: FinishReason
    """The finish reason of the reply generation."""
    created: datetime
    """The date the response was generated by a model."""

    def __init__(
        self,
        content: str,
        name="",
        finish_reason=FinishReason.UNDEFINED,
        created=datetime.now(),
        prompt_tokens=0,
        reply_tokens=0,
    ):
        super().__init__(content, MessageRole.CHATGPT, name)
        self.finish_reason = finish_reason
        self.created = created
        self.prompt_tokens = prompt_tokens
        self.reply_tokens = reply_tokens


class GPTChat(List[GPTMessage]):
    """A chat history that contains messages forming a prompt."""

    def to_dict(self) -> list[dict[str, str]]:
        """Get the chat history of as a list of message dictionaries for use in
        a chat completion request.

        Returns:
            list[dict[str, str]]: The chat history as list of dictionaries.
        """
        return [message.to_dict() for message in self]
